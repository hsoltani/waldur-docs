{"config":{"lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"Waldur Documentation Waldur is a platform for managing hybrid cloud resources. It is used to control both internal enterprise IT resources and for selling cloud services to the public. Waldur is composed of the following main components: Waldur MasterMind - broker and orchestrator of cloud services. Responsible for technical service delivery and connected matters. Exposes REST API for management Waldur HomePort - web-based self-service portal. Talks REST to MasterMind. Waldur is open-source, extendable and comes with a professional support provided by OpenNode. Outline Administration Guide User Guide API Changelog Project governance Contributing Support","title":"Waldur Documentation"},{"location":"#waldur-documentation","text":"Waldur is a platform for managing hybrid cloud resources. It is used to control both internal enterprise IT resources and for selling cloud services to the public. Waldur is composed of the following main components: Waldur MasterMind - broker and orchestrator of cloud services. Responsible for technical service delivery and connected matters. Exposes REST API for management Waldur HomePort - web-based self-service portal. Talks REST to MasterMind. Waldur is open-source, extendable and comes with a professional support provided by OpenNode.","title":"Waldur Documentation"},{"location":"#outline","text":"Administration Guide User Guide API Changelog Project governance Contributing Support","title":"Outline"},{"location":"admin-guide/","text":"Index Architecture Hardware requirements Deployment MasterMind configuration HomePort configuration Upgrade Identity providers Monitoring Logging Multi-tenant deployments Organization management System Provider Management ServiceStore configuration Cookie policy Marketplace architecture Marketplace plugins","title":"Index"},{"location":"admin-guide/#index","text":"Architecture Hardware requirements Deployment MasterMind configuration HomePort configuration Upgrade Identity providers Monitoring Logging Multi-tenant deployments Organization management System Provider Management ServiceStore configuration Cookie policy Marketplace architecture Marketplace plugins","title":"Index"},{"location":"admin-guide/architecture/architecture/","text":"General Architecture Modules Diagram Modules Diagram TODO: add changed diagram Physical Architecture TODO: add changed diagram Backend uWSGI (web server) Django REST API server Celery workers (backend processing) PostgreSQL (operational database) Redis (message queue and cache) Frontend HTTP web server; frontend is a JavaScript application written in ReactJS","title":"General Architecture"},{"location":"admin-guide/architecture/architecture/#general-architecture","text":"Modules Diagram","title":"General Architecture"},{"location":"admin-guide/architecture/architecture/#modules-diagram","text":"","title":"Modules Diagram"},{"location":"admin-guide/architecture/architecture/#todo-add-changed-diagram","text":"","title":"TODO: add changed diagram"},{"location":"admin-guide/architecture/architecture/#physical-architecture","text":"","title":"Physical Architecture"},{"location":"admin-guide/architecture/architecture/#todo-add-changed-diagram_1","text":"","title":"TODO: add changed diagram"},{"location":"admin-guide/architecture/architecture/#backend","text":"uWSGI (web server) Django REST API server Celery workers (backend processing) PostgreSQL (operational database) Redis (message queue and cache)","title":"Backend"},{"location":"admin-guide/architecture/architecture/#frontend","text":"HTTP web server; frontend is a JavaScript application written in ReactJS","title":"Frontend"},{"location":"admin-guide/architecture/frontend-architecture/","text":"Front-end architecture Logical front-end architecture","title":"Front-end architecture"},{"location":"admin-guide/architecture/frontend-architecture/#front-end-architecture","text":"","title":"Front-end architecture"},{"location":"admin-guide/architecture/frontend-architecture/#logical-front-end-architecture","text":"","title":"Logical front-end architecture"},{"location":"admin-guide/deployment/demo-deployment/","text":"Demo Deployment Demo deployment of Waldur can be setup quickly with docker-compose . Please see waldur docker-compose configuration for the latest version.","title":"Demo Deployment"},{"location":"admin-guide/deployment/demo-deployment/#demo-deployment","text":"Demo deployment of Waldur can be setup quickly with docker-compose . Please see waldur docker-compose configuration for the latest version.","title":"Demo Deployment"},{"location":"admin-guide/hardware-requirements/requirements/","text":"Hardware requirements Waldur Mastermind Celery workers By default 3 Celery workers and one Celery beat process are started. Minimum requirements: 2 CPU, 2 GB RAM Recommended setup: 4 CPU or more, 8 GB RAM or more More memory should be added if more Celery worker processes are running on the same host (512 MB for each 4 Celery workers). PostgreSQL Minimum requirements: 1 CPU, 1 GB RAM Recommended setup: 2 CPU or more, 2 GB RAM or more Redis Minimum requirements: 1 CPU, 512 MB RAM Recommended setup: 2 CPU or more, 1 GB RAM or more uWSGI By default 4 uWSGI processes are started. - Minimum requirements: 1 CPU, 1GB RAM for every node - Recommended setup: 2 CPU or more, 2 GB RAM or more Waldur HomePort Minimum web server capable to serve static files is enough. HomePort should work just fine with Nginx on 1 CPU and 512 MB RAM. All-in-one It is possible to run Celery, PostgreSQL, Redis and uWSGI services on one machine. This setup is not recommended for production environments but can be useful for demonstration and evaluation purposes. Recommended setup: 4 CPU, 10 GB RAM Operating system: CentOS7 or RHEL7","title":"Hardware requirements"},{"location":"admin-guide/hardware-requirements/requirements/#hardware-requirements","text":"","title":"Hardware requirements"},{"location":"admin-guide/hardware-requirements/requirements/#waldur-mastermind","text":"","title":"Waldur Mastermind"},{"location":"admin-guide/hardware-requirements/requirements/#celery-workers","text":"By default 3 Celery workers and one Celery beat process are started. Minimum requirements: 2 CPU, 2 GB RAM Recommended setup: 4 CPU or more, 8 GB RAM or more More memory should be added if more Celery worker processes are running on the same host (512 MB for each 4 Celery workers).","title":"Celery workers"},{"location":"admin-guide/hardware-requirements/requirements/#postgresql","text":"Minimum requirements: 1 CPU, 1 GB RAM Recommended setup: 2 CPU or more, 2 GB RAM or more","title":"PostgreSQL"},{"location":"admin-guide/hardware-requirements/requirements/#redis","text":"Minimum requirements: 1 CPU, 512 MB RAM Recommended setup: 2 CPU or more, 1 GB RAM or more","title":"Redis"},{"location":"admin-guide/hardware-requirements/requirements/#uwsgi","text":"By default 4 uWSGI processes are started. - Minimum requirements: 1 CPU, 1GB RAM for every node - Recommended setup: 2 CPU or more, 2 GB RAM or more","title":"uWSGI"},{"location":"admin-guide/hardware-requirements/requirements/#waldur-homeport","text":"Minimum web server capable to serve static files is enough. HomePort should work just fine with Nginx on 1 CPU and 512 MB RAM.","title":"Waldur HomePort"},{"location":"admin-guide/hardware-requirements/requirements/#all-in-one","text":"It is possible to run Celery, PostgreSQL, Redis and uWSGI services on one machine. This setup is not recommended for production environments but can be useful for demonstration and evaluation purposes. Recommended setup: 4 CPU, 10 GB RAM Operating system: CentOS7 or RHEL7","title":"All-in-one"},{"location":"admin-guide/mastermind-configuration/general/","text":"General Configuration Outline: Introduction Waldur settings Admin dashboard configuration Custom templates configuration Local time zone configuration Introduction Waldur is a Django -based application, so configuration is done by modifying settings.py file. If you want to configure options related to Django, such as tune caches, database connection, configure custom logging, etc, please refer to Django documentation . Please consult configuration guide to learn more. Admin dashboard configuration An admin dashboard supports custom links on Quick access panel. For instance, a panel below was configured with one additional link to https://waldur.com : Configuration of custom links is stored under FLUENT_DASHBOARD_QUICK_ACCESS_LINKS settings key and for current example has following structure: 1 2 3 4 5 6 7 8 9 FLUENT_DASHBOARD_QUICK_ACCESS_LINKS = [ { 'title' : '[Custom] Waldur - Cloud Service' , 'url' : 'https://waldur.com' , 'external' : True , # adds an icon specifying that this link is external, 'description' : 'Open-source Cloud Brokerage Platform' , 'attrs' : { 'target' : '_blank' } # add an attribute to generated anchor element which will open link in a new tab. }, ] Here is a short description of link parameters: Name Type Required Description description string No Tool tip on the link external boolean No Specifies whether additional icon indicating an external URL has to be added url URL Yes A URL of the link title string Yes A title of the generated link attrs dict No A dictionary of anchor attributes to be added to generated element It is also possible to omit optional fields and add links by specifying only a title and a URL to the generated link. 1 2 3 4 FLUENT_DASHBOARD_QUICK_ACCESS_LINKS = [ [ '[Custom] Waldur - Cloud Service' , 'https://waldur.com' ], [ 'Find us on GitHub' , 'https://github.com/opennode/waldur-core' ], ] Custom templates configuration To overwrite default templates you should use django-dbtemplates . It allows creation of templates through /admin . Local time zone configuration Set TIME_ZONE setting in /etc/waldur/override.conf.py to use local time zone. By default it is set to UTC. See the list of time zones for possible options.","title":"General Configuration"},{"location":"admin-guide/mastermind-configuration/general/#general-configuration","text":"Outline: Introduction Waldur settings Admin dashboard configuration Custom templates configuration Local time zone configuration","title":"General Configuration"},{"location":"admin-guide/mastermind-configuration/general/#introduction","text":"Waldur is a Django -based application, so configuration is done by modifying settings.py file. If you want to configure options related to Django, such as tune caches, database connection, configure custom logging, etc, please refer to Django documentation . Please consult configuration guide to learn more.","title":"Introduction"},{"location":"admin-guide/mastermind-configuration/general/#admin-dashboard-configuration","text":"An admin dashboard supports custom links on Quick access panel. For instance, a panel below was configured with one additional link to https://waldur.com : Configuration of custom links is stored under FLUENT_DASHBOARD_QUICK_ACCESS_LINKS settings key and for current example has following structure: 1 2 3 4 5 6 7 8 9 FLUENT_DASHBOARD_QUICK_ACCESS_LINKS = [ { 'title' : '[Custom] Waldur - Cloud Service' , 'url' : 'https://waldur.com' , 'external' : True , # adds an icon specifying that this link is external, 'description' : 'Open-source Cloud Brokerage Platform' , 'attrs' : { 'target' : '_blank' } # add an attribute to generated anchor element which will open link in a new tab. }, ] Here is a short description of link parameters: Name Type Required Description description string No Tool tip on the link external boolean No Specifies whether additional icon indicating an external URL has to be added url URL Yes A URL of the link title string Yes A title of the generated link attrs dict No A dictionary of anchor attributes to be added to generated element It is also possible to omit optional fields and add links by specifying only a title and a URL to the generated link. 1 2 3 4 FLUENT_DASHBOARD_QUICK_ACCESS_LINKS = [ [ '[Custom] Waldur - Cloud Service' , 'https://waldur.com' ], [ 'Find us on GitHub' , 'https://github.com/opennode/waldur-core' ], ]","title":"Admin dashboard configuration"},{"location":"admin-guide/mastermind-configuration/general/#custom-templates-configuration","text":"To overwrite default templates you should use django-dbtemplates . It allows creation of templates through /admin .","title":"Custom templates configuration"},{"location":"admin-guide/mastermind-configuration/general/#local-time-zone-configuration","text":"Set TIME_ZONE setting in /etc/waldur/override.conf.py to use local time zone. By default it is set to UTC. See the list of time zones for possible options.","title":"Local time zone configuration"},{"location":"api/","text":"Index Authentication","title":"Index"},{"location":"api/#index","text":"Authentication","title":"Index"},{"location":"api/authentication/","text":"Authentication Outline: Authentication with username and password Authentication Token management Waldur MasterMind exposes REST API for all of its operations. Below are examples of typical operations performed against APIs. To run the examples, we are using a HTTPie . Almost all of the operations with API require an authentication token. Below we list two methods on how to get it. Authentication with username and password If your account is allowed to use username/password and the method is enabled (e.g. in dev environment), you can get a new token by submitting a username/password as JSON to a specific endpoint. 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 $ http -v POST https://waldur.example.com/api-auth/password/ username = user password = password POST /api-auth/password/ HTTP/1.1 Accept: application/json, */* ; q = 0 .5 Accept-Encoding: gzip, deflate Connection: keep-alive Content-Length: 40 Content-Type: application/json Host: waldur.example.com User-Agent: HTTPie/2.3.0 { \"password\" : \"user\" , \"username\" : \"password\" } HTTP/1.1 200 OK Access-Control-Allow-Credentials: true Access-Control-Allow-Headers: Accept, Accept-Encoding, Authorization, Content-Type, Origin, User-Agent, X-CSRFToken, X-Requested-With Access-Control-Allow-Methods: DELETE, GET, OPTIONS, PATCH, POST, PUT Access-Control-Allow-Origin: * Access-Control-Expose-Headers: Link, X-Result-Count Allow: POST, OPTIONS Content-Language: en Content-Length: 52 Content-Security-Policy: report-uri csp.hpc.ut.ee ; form-action 'self' ; Content-Type: application/json Date: Mon, 05 Apr 2021 14 :37:55 GMT Referrer-Policy: no-referrer-when-downgrade Strict-Transport-Security: max-age = 31536000 ; preload Vary: Accept-Language, Cookie X-Content-Type-Options: nosniff X-Frame-Options: SAMEORIGIN X-XSS-Protection: 1 ; mode = block { \"token\" : \"65b4c4f5e25f0cadb3e11c181be4ffa3881741f8\" } Authentication Token management The easiest way to get your token is via Waldur HomePort. Go to user workspace by selecting 'Manage' in the user drop-down. Scroll down to the Current API token field and click on the 'eye' icon to display the token.","title":"Authentication"},{"location":"api/authentication/#authentication","text":"Outline: Authentication with username and password Authentication Token management Waldur MasterMind exposes REST API for all of its operations. Below are examples of typical operations performed against APIs. To run the examples, we are using a HTTPie . Almost all of the operations with API require an authentication token. Below we list two methods on how to get it.","title":"Authentication"},{"location":"api/authentication/#authentication-with-username-and-password","text":"If your account is allowed to use username/password and the method is enabled (e.g. in dev environment), you can get a new token by submitting a username/password as JSON to a specific endpoint. 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 $ http -v POST https://waldur.example.com/api-auth/password/ username = user password = password POST /api-auth/password/ HTTP/1.1 Accept: application/json, */* ; q = 0 .5 Accept-Encoding: gzip, deflate Connection: keep-alive Content-Length: 40 Content-Type: application/json Host: waldur.example.com User-Agent: HTTPie/2.3.0 { \"password\" : \"user\" , \"username\" : \"password\" } HTTP/1.1 200 OK Access-Control-Allow-Credentials: true Access-Control-Allow-Headers: Accept, Accept-Encoding, Authorization, Content-Type, Origin, User-Agent, X-CSRFToken, X-Requested-With Access-Control-Allow-Methods: DELETE, GET, OPTIONS, PATCH, POST, PUT Access-Control-Allow-Origin: * Access-Control-Expose-Headers: Link, X-Result-Count Allow: POST, OPTIONS Content-Language: en Content-Length: 52 Content-Security-Policy: report-uri csp.hpc.ut.ee ; form-action 'self' ; Content-Type: application/json Date: Mon, 05 Apr 2021 14 :37:55 GMT Referrer-Policy: no-referrer-when-downgrade Strict-Transport-Security: max-age = 31536000 ; preload Vary: Accept-Language, Cookie X-Content-Type-Options: nosniff X-Frame-Options: SAMEORIGIN X-XSS-Protection: 1 ; mode = block { \"token\" : \"65b4c4f5e25f0cadb3e11c181be4ffa3881741f8\" }","title":"Authentication with username and password"},{"location":"api/authentication/#authentication-token-management","text":"The easiest way to get your token is via Waldur HomePort. Go to user workspace by selecting 'Manage' in the user drop-down. Scroll down to the Current API token field and click on the 'eye' icon to display the token.","title":"Authentication Token management"},{"location":"changelog/","text":"Changelog","title":"Changelog"},{"location":"changelog/#changelog","text":"","title":"Changelog"},{"location":"contributing/","text":"Contributing","title":"Contributing"},{"location":"contributing/#contributing","text":"","title":"Contributing"},{"location":"project-governance/","text":"Project governance","title":"Project governance"},{"location":"project-governance/#project-governance","text":"","title":"Project governance"},{"location":"support/","text":"Support","title":"Support"},{"location":"support/#support","text":"","title":"Support"},{"location":"user-guide/","text":"User Guide","title":"User Guide"},{"location":"user-guide/#user-guide","text":"","title":"User Guide"}]}