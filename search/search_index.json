{"config":{"lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"Waldur Documentation Waldur is a platform for managing hybrid cloud resources. It is used to control both internal enterprise IT resources and for selling cloud services to the public. Waldur is composed of the following main components: Waldur MasterMind - broker and orchestrator of cloud services. Responsible for technical service delivery and connected matters. Exposes REST API for management Waldur HomePort - web-based self-service portal. Talks REST to MasterMind. Waldur is open-source, extendable and comes with a professional support provided by OpenNode. Outline Administration Guide User Guide API Changelog Project governance Contributing Support","title":"Waldur Documentation"},{"location":"#waldur-documentation","text":"Waldur is a platform for managing hybrid cloud resources. It is used to control both internal enterprise IT resources and for selling cloud services to the public. Waldur is composed of the following main components: Waldur MasterMind - broker and orchestrator of cloud services. Responsible for technical service delivery and connected matters. Exposes REST API for management Waldur HomePort - web-based self-service portal. Talks REST to MasterMind. Waldur is open-source, extendable and comes with a professional support provided by OpenNode.","title":"Waldur Documentation"},{"location":"#outline","text":"Administration Guide User Guide API Changelog Project governance Contributing Support","title":"Outline"},{"location":"admin-guide/","text":"Index Architecture Hardware requirements Deployment MasterMind configuration HomePort configuration Upgrade Identity providers Monitoring Logging Multi-tenant deployments Organization management System Provider Management ServiceStore configuration Cookie policy Marketplace architecture Marketplace plugins","title":"Index"},{"location":"admin-guide/#index","text":"Architecture Hardware requirements Deployment MasterMind configuration HomePort configuration Upgrade Identity providers Monitoring Logging Multi-tenant deployments Organization management System Provider Management ServiceStore configuration Cookie policy Marketplace architecture Marketplace plugins","title":"Index"},{"location":"admin-guide/architecture/architecture/","text":"General Architecture Modules Diagram Modules Diagram TODO: add changed diagram Physical Architecture TODO: add changed diagram Backend uWSGI (web server) Django REST API server Celery workers (backend processing) PostgreSQL (operational database) Redis (message queue and cache) Frontend HTTP web server; frontend is a JavaScript application written in ReactJS","title":"General Architecture"},{"location":"admin-guide/architecture/architecture/#general-architecture","text":"Modules Diagram","title":"General Architecture"},{"location":"admin-guide/architecture/architecture/#modules-diagram","text":"","title":"Modules Diagram"},{"location":"admin-guide/architecture/architecture/#todo-add-changed-diagram","text":"","title":"TODO: add changed diagram"},{"location":"admin-guide/architecture/architecture/#physical-architecture","text":"","title":"Physical Architecture"},{"location":"admin-guide/architecture/architecture/#todo-add-changed-diagram_1","text":"","title":"TODO: add changed diagram"},{"location":"admin-guide/architecture/architecture/#backend","text":"uWSGI (web server) Django REST API server Celery workers (backend processing) PostgreSQL (operational database) Redis (message queue and cache)","title":"Backend"},{"location":"admin-guide/architecture/architecture/#frontend","text":"HTTP web server; frontend is a JavaScript application written in ReactJS","title":"Frontend"},{"location":"admin-guide/architecture/frontend-architecture/","text":"Front-end architecture Logical front-end architecture","title":"Front-end architecture"},{"location":"admin-guide/architecture/frontend-architecture/#front-end-architecture","text":"","title":"Front-end architecture"},{"location":"admin-guide/architecture/frontend-architecture/#logical-front-end-architecture","text":"","title":"Logical front-end architecture"},{"location":"admin-guide/deployment/demo-deployment/","text":"Demo Deployment Demo deployment of Waldur can be setup quickly with docker-compose . Please see waldur docker-compose configuration for the latest version.","title":"Demo Deployment"},{"location":"admin-guide/deployment/demo-deployment/#demo-deployment","text":"Demo deployment of Waldur can be setup quickly with docker-compose . Please see waldur docker-compose configuration for the latest version.","title":"Demo Deployment"},{"location":"admin-guide/hardware-requirements/requirements/","text":"Hardware requirements Waldur Mastermind Celery workers By default 3 Celery workers and one Celery beat process are started. Minimum requirements: 2 CPU, 2 GB RAM Recommended setup: 4 CPU or more, 8 GB RAM or more More memory should be added if more Celery worker processes are running on the same host (512 MB for each 4 Celery workers). PostgreSQL Minimum requirements: 1 CPU, 1 GB RAM Recommended setup: 2 CPU or more, 2 GB RAM or more Redis Minimum requirements: 1 CPU, 512 MB RAM Recommended setup: 2 CPU or more, 1 GB RAM or more uWSGI By default 4 uWSGI processes are started. - Minimum requirements: 1 CPU, 1GB RAM for every node - Recommended setup: 2 CPU or more, 2 GB RAM or more Waldur HomePort Minimum web server capable to serve static files is enough. HomePort should work just fine with Nginx on 1 CPU and 512 MB RAM. All-in-one It is possible to run Celery, PostgreSQL, Redis and uWSGI services on one machine. This setup is not recommended for production environments but can be useful for demonstration and evaluation purposes. Recommended setup: 4 CPU, 10 GB RAM Operating system: CentOS7 or RHEL7","title":"Hardware requirements"},{"location":"admin-guide/hardware-requirements/requirements/#hardware-requirements","text":"","title":"Hardware requirements"},{"location":"admin-guide/hardware-requirements/requirements/#waldur-mastermind","text":"","title":"Waldur Mastermind"},{"location":"admin-guide/hardware-requirements/requirements/#celery-workers","text":"By default 3 Celery workers and one Celery beat process are started. Minimum requirements: 2 CPU, 2 GB RAM Recommended setup: 4 CPU or more, 8 GB RAM or more More memory should be added if more Celery worker processes are running on the same host (512 MB for each 4 Celery workers).","title":"Celery workers"},{"location":"admin-guide/hardware-requirements/requirements/#postgresql","text":"Minimum requirements: 1 CPU, 1 GB RAM Recommended setup: 2 CPU or more, 2 GB RAM or more","title":"PostgreSQL"},{"location":"admin-guide/hardware-requirements/requirements/#redis","text":"Minimum requirements: 1 CPU, 512 MB RAM Recommended setup: 2 CPU or more, 1 GB RAM or more","title":"Redis"},{"location":"admin-guide/hardware-requirements/requirements/#uwsgi","text":"By default 4 uWSGI processes are started. - Minimum requirements: 1 CPU, 1GB RAM for every node - Recommended setup: 2 CPU or more, 2 GB RAM or more","title":"uWSGI"},{"location":"admin-guide/hardware-requirements/requirements/#waldur-homeport","text":"Minimum web server capable to serve static files is enough. HomePort should work just fine with Nginx on 1 CPU and 512 MB RAM.","title":"Waldur HomePort"},{"location":"admin-guide/hardware-requirements/requirements/#all-in-one","text":"It is possible to run Celery, PostgreSQL, Redis and uWSGI services on one machine. This setup is not recommended for production environments but can be useful for demonstration and evaluation purposes. Recommended setup: 4 CPU, 10 GB RAM Operating system: CentOS7 or RHEL7","title":"All-in-one"},{"location":"admin-guide/mastermind-configuration/general/","text":"General Configuration Outline: Introduction Waldur Core settings Admin dashboard configuration Custom templates configuration Local time zone configuration Introduction Waldur is a Django -based application, so configuration is done by modifying settings.py file. If you want to configure options related to Django, such as tune caches, database connection, configure custom logging, etc, please refer to Django documentation . Configuration for Waldur Core is namespaced inside a single Django setting, named WALDUR_CORE . Usually each plugin's settings are namespaced, so please refer to plugin documentation for details. Basic configuration might look like this: WALDUR_CORE = { 'ENABLE_GEOIP' : True , 'EXTENSIONS_AUTOREGISTER' : True , 'GOOGLE_API' : { 'Android' : { 'server_key' : 'AIzaSyA2_7UaVIxXfKeFvxTjQNZbrzkXG9OTCkg' , }, 'iOS' : { 'server_key' : 'AIzaSyA34zlG_y5uHOe2FmcJKwfk2vG-3RW05vk' , } }, 'SHOW_ALL_USERS' : False , 'OWNER_CAN_MANAGE_CUSTOMER' : False , 'CREATE_DEFAULT_PROJECT_ON_ORGANIZATION_CREATION' : False , 'TOKEN_KEY' : 'x-auth-token' , 'TOKEN_LIFETIME' : timedelta ( hours = 1 ), 'SITE_NAME' : 'Waldur MasterMind' , 'COUNTRIES' : [ 'EE' , 'LV' , 'LT' ], 'NOTIFICATIONS_PROFILE_CHANGES' : { 'ENABLED' : True , 'FIELDS' : ( 'email' , 'phone_number' , 'job_title' ) }, } Waldur will send notifications from email address specified in DEFAULT_FROM_EMAIL variable. for example, DEFAULT_FROM_EMAIL = 'noreply@example.com' Waldur Core settings ALLOW_SIGNUP_WITHOUT_INVITATION is disabled by default. Set to True to enable signup by invitation only. AUTHENTICATION_METHODS is a list of enabled authentication methods. It allows you to restrict enabled authentication methods. BACKEND_FIELDS_EDITABLE allows to control /admin writable fields. If this flag is disabled, it is impossible to edit any field that corresponds to backend value via /admin . Such restriction allows to save information from corruption. Flag is enabled by default. COMPANY_TYPES specifies list of available company types, it is used in organization creation dialog. By default Ministry , Private company , Public company , Government owned company are available. COUNTRIES list is used in organization creation dialog in order to limit country choices to predefined set. CREATE_DEFAULT_PROJECT_ON_ORGANIZATION_CREATION enables generation of the first project on organization creation. CURRENCY_NAME is used in marketplace order details and invoice for currency formatting. ENABLE_ACCOUNTING_START_DATE allows to enable accounting only for organizations using value of accounting_start_date field. Disabled by default. ENABLE_GEOIP indicates whether geolocation is enabled (boolean). Enabled by default. EXTENSIONS_AUTOREGISTER defines whether extensions should be automatically registered (boolean). GOOGLE_API is settings dictionary for Google Cloud Messaging: Android specifies settings for Android devices. server_key is Google Cloud messaging server key. IOS specifies settings for IOS devices. server_key is Google Cloud messaging server key. NOTIFICATION_TITLE is string to be displayed in the notification pop-up title. INITIAL_CUSTOMER_AGREEMENT_NUMBER allows to tweak initial value of agreement number ( 4000 by default). It is assumed that organization owner should accept terms of services when organization is registered via Waldur HomePort. INVITATION_LIFETIME defines for how long invitation remains valid. Default value - 1 week. INVITATIONS_ENABLED allows to enable invitations feature. Enabled by default. NATIVE_NAME_ENABLED allows to render native name field in customer and user forms. Disabled by default. NOTIFICATIONS_PROFILE_CHANGES allows enabling notifications about profile changes of organization owners and allows selecting, which fields of profile should be tracked. OWNER_CAN_MANAGE_CUSTOMER enables organization owners to create an organization (boolean). OWNERS_CAN_MANAGE_OWNERS enables organization owners to manage other organization owners, enabled by default. ONLY_STAFF_MANAGES_SERVICES allows to restrict provider management only to staff users, disabled by default. Please also note, that if this flag is enabled, OpenStack tenant provision & modification would be available for staff users only. It means that organization owners wouldn't be able to manage virtual private clouds. SELLER_COUNTRY_CODE specifies seller legal or effective country of registration or residence as an ISO 3166-1 alpha-2 country code. It is used for computing VAT charge rate. SHOW_ALL_USERS indicates whether user can see all other users in api/users/ endpoint (boolean). SITE_NAME is used in email notifications in order to refer to the current deployment in user-friendly way. SITE_ADDRESS is used in marketplace order header. SITE_EMAIL is used in marketplace order header. SITE_PHONE is used in marketplace order header. SITE_LOGO is used in marketplace order header. TOKEN_KEY is header for token authentication. For example, 'x-auth-token'. TOKEN_LIFETIME defines for how long user token should remain valid if there was no action from user ( timedelta value, for example timedelta(hours=1) ). VALIDATE_INVITATION_EMAIL allows to ensure that invitation and user emails match. Disabled by default. Admin dashboard configuration An admin dashboard supports custom links on Quick access panel. For instance, a panel below was configured with one additional link to https://waldur.com : Configuration of custom links is stored under FLUENT_DASHBOARD_QUICK_ACCESS_LINKS settings key and for current example has following structure: FLUENT_DASHBOARD_QUICK_ACCESS_LINKS = [ { 'title' : '[Custom] Waldur - Cloud Service' , 'url' : 'https://waldur.com' , 'external' : True , # adds an icon specifying that this link is external, 'description' : 'Open-source Cloud Brokerage Platform' , 'attrs' : { 'target' : '_blank' } # add an attribute to generated anchor element which will open link in a new tab. }, ] Here is a short description of link parameters: Name Type Required Description description string No Tool tip on the link external boolean No Specifies whether additional icon indicating an external URL has to be added url URL Yes A URL of the link title string Yes A title of the generated link attrs dict No A dictionary of anchor attributes to be added to generated element It is also possible to omit optional fields and add links by specifying only a title and a URL to the generated link. FLUENT_DASHBOARD_QUICK_ACCESS_LINKS = [ [ '[Custom] Waldur - Cloud Service' , 'https://waldur.com' ], [ 'Find us on GitHub' , 'https://github.com/opennode/waldur-core' ], ] Custom templates configuration To overwrite default templates you should use django-dbtemplates . It allows creation of templates through /admin . Local time zone configuration Set TIME_ZONE setting in /etc/waldur/override.conf.py to use local time zone. By default it is set to UTC. See the list of time zones for possible options.","title":"General Configuration"},{"location":"admin-guide/mastermind-configuration/general/#general-configuration","text":"Outline: Introduction Waldur Core settings Admin dashboard configuration Custom templates configuration Local time zone configuration","title":"General Configuration"},{"location":"admin-guide/mastermind-configuration/general/#introduction","text":"Waldur is a Django -based application, so configuration is done by modifying settings.py file. If you want to configure options related to Django, such as tune caches, database connection, configure custom logging, etc, please refer to Django documentation . Configuration for Waldur Core is namespaced inside a single Django setting, named WALDUR_CORE . Usually each plugin's settings are namespaced, so please refer to plugin documentation for details. Basic configuration might look like this: WALDUR_CORE = { 'ENABLE_GEOIP' : True , 'EXTENSIONS_AUTOREGISTER' : True , 'GOOGLE_API' : { 'Android' : { 'server_key' : 'AIzaSyA2_7UaVIxXfKeFvxTjQNZbrzkXG9OTCkg' , }, 'iOS' : { 'server_key' : 'AIzaSyA34zlG_y5uHOe2FmcJKwfk2vG-3RW05vk' , } }, 'SHOW_ALL_USERS' : False , 'OWNER_CAN_MANAGE_CUSTOMER' : False , 'CREATE_DEFAULT_PROJECT_ON_ORGANIZATION_CREATION' : False , 'TOKEN_KEY' : 'x-auth-token' , 'TOKEN_LIFETIME' : timedelta ( hours = 1 ), 'SITE_NAME' : 'Waldur MasterMind' , 'COUNTRIES' : [ 'EE' , 'LV' , 'LT' ], 'NOTIFICATIONS_PROFILE_CHANGES' : { 'ENABLED' : True , 'FIELDS' : ( 'email' , 'phone_number' , 'job_title' ) }, } Waldur will send notifications from email address specified in DEFAULT_FROM_EMAIL variable. for example, DEFAULT_FROM_EMAIL = 'noreply@example.com'","title":"Introduction"},{"location":"admin-guide/mastermind-configuration/general/#waldur-core-settings","text":"ALLOW_SIGNUP_WITHOUT_INVITATION is disabled by default. Set to True to enable signup by invitation only. AUTHENTICATION_METHODS is a list of enabled authentication methods. It allows you to restrict enabled authentication methods. BACKEND_FIELDS_EDITABLE allows to control /admin writable fields. If this flag is disabled, it is impossible to edit any field that corresponds to backend value via /admin . Such restriction allows to save information from corruption. Flag is enabled by default. COMPANY_TYPES specifies list of available company types, it is used in organization creation dialog. By default Ministry , Private company , Public company , Government owned company are available. COUNTRIES list is used in organization creation dialog in order to limit country choices to predefined set. CREATE_DEFAULT_PROJECT_ON_ORGANIZATION_CREATION enables generation of the first project on organization creation. CURRENCY_NAME is used in marketplace order details and invoice for currency formatting. ENABLE_ACCOUNTING_START_DATE allows to enable accounting only for organizations using value of accounting_start_date field. Disabled by default. ENABLE_GEOIP indicates whether geolocation is enabled (boolean). Enabled by default. EXTENSIONS_AUTOREGISTER defines whether extensions should be automatically registered (boolean). GOOGLE_API is settings dictionary for Google Cloud Messaging: Android specifies settings for Android devices. server_key is Google Cloud messaging server key. IOS specifies settings for IOS devices. server_key is Google Cloud messaging server key. NOTIFICATION_TITLE is string to be displayed in the notification pop-up title. INITIAL_CUSTOMER_AGREEMENT_NUMBER allows to tweak initial value of agreement number ( 4000 by default). It is assumed that organization owner should accept terms of services when organization is registered via Waldur HomePort. INVITATION_LIFETIME defines for how long invitation remains valid. Default value - 1 week. INVITATIONS_ENABLED allows to enable invitations feature. Enabled by default. NATIVE_NAME_ENABLED allows to render native name field in customer and user forms. Disabled by default. NOTIFICATIONS_PROFILE_CHANGES allows enabling notifications about profile changes of organization owners and allows selecting, which fields of profile should be tracked. OWNER_CAN_MANAGE_CUSTOMER enables organization owners to create an organization (boolean). OWNERS_CAN_MANAGE_OWNERS enables organization owners to manage other organization owners, enabled by default. ONLY_STAFF_MANAGES_SERVICES allows to restrict provider management only to staff users, disabled by default. Please also note, that if this flag is enabled, OpenStack tenant provision & modification would be available for staff users only. It means that organization owners wouldn't be able to manage virtual private clouds. SELLER_COUNTRY_CODE specifies seller legal or effective country of registration or residence as an ISO 3166-1 alpha-2 country code. It is used for computing VAT charge rate. SHOW_ALL_USERS indicates whether user can see all other users in api/users/ endpoint (boolean). SITE_NAME is used in email notifications in order to refer to the current deployment in user-friendly way. SITE_ADDRESS is used in marketplace order header. SITE_EMAIL is used in marketplace order header. SITE_PHONE is used in marketplace order header. SITE_LOGO is used in marketplace order header. TOKEN_KEY is header for token authentication. For example, 'x-auth-token'. TOKEN_LIFETIME defines for how long user token should remain valid if there was no action from user ( timedelta value, for example timedelta(hours=1) ). VALIDATE_INVITATION_EMAIL allows to ensure that invitation and user emails match. Disabled by default.","title":"Waldur Core settings"},{"location":"admin-guide/mastermind-configuration/general/#admin-dashboard-configuration","text":"An admin dashboard supports custom links on Quick access panel. For instance, a panel below was configured with one additional link to https://waldur.com : Configuration of custom links is stored under FLUENT_DASHBOARD_QUICK_ACCESS_LINKS settings key and for current example has following structure: FLUENT_DASHBOARD_QUICK_ACCESS_LINKS = [ { 'title' : '[Custom] Waldur - Cloud Service' , 'url' : 'https://waldur.com' , 'external' : True , # adds an icon specifying that this link is external, 'description' : 'Open-source Cloud Brokerage Platform' , 'attrs' : { 'target' : '_blank' } # add an attribute to generated anchor element which will open link in a new tab. }, ] Here is a short description of link parameters: Name Type Required Description description string No Tool tip on the link external boolean No Specifies whether additional icon indicating an external URL has to be added url URL Yes A URL of the link title string Yes A title of the generated link attrs dict No A dictionary of anchor attributes to be added to generated element It is also possible to omit optional fields and add links by specifying only a title and a URL to the generated link. FLUENT_DASHBOARD_QUICK_ACCESS_LINKS = [ [ '[Custom] Waldur - Cloud Service' , 'https://waldur.com' ], [ 'Find us on GitHub' , 'https://github.com/opennode/waldur-core' ], ]","title":"Admin dashboard configuration"},{"location":"admin-guide/mastermind-configuration/general/#custom-templates-configuration","text":"To overwrite default templates you should use django-dbtemplates . It allows creation of templates through /admin .","title":"Custom templates configuration"},{"location":"admin-guide/mastermind-configuration/general/#local-time-zone-configuration","text":"Set TIME_ZONE setting in /etc/waldur/override.conf.py to use local time zone. By default it is set to UTC. See the list of time zones for possible options.","title":"Local time zone configuration"},{"location":"api/","text":"Index","title":"Index"},{"location":"api/#index","text":"","title":"Index"},{"location":"changelog/","text":"Changelog","title":"Changelog"},{"location":"changelog/#changelog","text":"","title":"Changelog"},{"location":"contributing/","text":"Contributing","title":"Contributing"},{"location":"contributing/#contributing","text":"","title":"Contributing"},{"location":"project-governance/","text":"Project governance","title":"Project governance"},{"location":"project-governance/#project-governance","text":"","title":"Project governance"},{"location":"support/","text":"Support","title":"Support"},{"location":"support/#support","text":"","title":"Support"},{"location":"user-guide/","text":"User Guide","title":"User Guide"},{"location":"user-guide/#user-guide","text":"","title":"User Guide"}]}